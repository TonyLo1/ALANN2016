    // Pei Wang's "Non-Axiomatic Logic" specified with a math. notation inspired DSL with given intiutive explainations:
    
    //The rules of NAL, can be interpreted by considering the intiution behind the following two relations:
    // Statement:                 (A --> B):               A can stand for B
    // Statement about Statement: (A --> B) ==> (X --> Y): If A is true, so is/will be B
    // --> is a relation in meaning of terms, while ==> is a relation of truth between statements.
    
    //// Revision ////////////////////////////////////////////////////////////////////////////////////
    // When a given belief is challenged by new experience, a new belief2 with same content (and disjoint evidental base),
    // a new revised task, which sums up the evidence of both belief and belief2 is derived:
    
    //   A, A |- A, (Truth:Revision) (Commented out because it is already handled by belief management in java)
    
    //Similarity to Inheritance
    
        (S --> P), (S <-> P), task("?") |- (S --> P), (Truth:StructuralIntersection, Punctuation:Judgment)
		/* Q(Inh(s1,p1)), Sim(s2,p2) when s1 = s2 && p1 = p2 && s1 <> p1 -> J(Inh(s1, p1)), (Some(structuralInt(tv1)), None)

    //Inheritance to Similarity
    
        (S <-> P), (S --> P), task("?") |- (S <-> P), (Truth:StructuralAbduction, Punctuation:Judgment)
        /* Q(Sim(s1,p1)), Inh(s2,p2) when s1 = s2 && p1 = p2 && s1 <> p1 -> J(Sim(s1, p1)), (Some(structuralAbd(tv1)), None)

    //Set Definition Similarity to Inheritance
    
        ({S} <-> {P}), {S} |- ({S} --> {P}), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Sim(ExtSet([s]), ExtSet([p]))), _ when s <> p -> J(Inh(ExtSet([s]), ExtSet([p]))), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Sim(ExtSet([s]), ExtSet([p]))), _ when s <> p -> Q(Inh(ExtSet([s]), ExtSet([p]))), (None, None)

        ({S} <-> {P}), {P} |- ({S} --> {P}), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Sim(ExtSet([s]), ExtSet([p]))), _ when s <> p -> J(Inh(ExtSet([s]), ExtSet([p]))), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Sim(ExtSet([s]), ExtSet([p]))), _ when s <> p -> Q(Inh(ExtSet([s]), ExtSet([p]))), (None, None)

        ([S] <-> [P]), [S] |- ([S] --> [P]), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Sim(IntSet([s]), IntSet([p]))), _ when s <> p -> J(Inh(IntSet([s]), IntSet([p]))), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Sim(IntSet([s]), IntSet([p]))), _ when s <> p -> Q(Inh(IntSet([s]), IntSet([p]))), (None, None)

        ([S] <-> [P]), [P] |- ([S] --> [P]), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Sim(IntSet([s]), IntSet([p]))), _ when s <> p -> J(Inh(IntSet([s]), IntSet([p]))), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Sim(IntSet([s]), IntSet([p]))), _ when s <> p -> Q(Inh(IntSet([s]), IntSet([p]))), (None, None)

        ({S} <-> {P}), {S} |- ({P} --> {S}), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Sim(ExtSet([s]), ExtSet([p]))), _ when s <> p -> J(Inh(ExtSet([p]), ExtSet([s]))), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Sim(ExtSet([s]), ExtSet([p]))), _ when s <> p -> Q(Inh(ExtSet([p]), ExtSet([s]))), (None, None)

        ({S} <-> {P}), {P} |- ({P} --> {S}), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Sim(ExtSet([s]), ExtSet([p]))), _ when s <> p -> J(Inh(ExtSet([p]), ExtSet([s]))), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Sim(ExtSet([s]), ExtSet([p]))), _ when s <> p -> Q(Inh(ExtSet([p]), ExtSet([s]))), (None, None)

        ([S] <-> [P]), [S] |- ([P] --> [S]), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Sim(IntSet([s]), IntSet([p]))), _ when s <> p -> J(Inh(IntSet([p]), IntSet([s]))), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Sim(IntSet([s]), IntSet([p]))), _ when s <> p -> Q(Inh(IntSet([p]), IntSet([s]))), (None, None)

        ([S] <-> [P]), [P] |- ([P] --> [S]), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Sim(IntSet([s]), IntSet([p]))), _ when s <> p -> J(Inh(IntSet([p]), IntSet([s]))), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Sim(IntSet([s]), IntSet([p]))), _ when s <> p -> Q(Inh(IntSet([p]), IntSet([s]))), (None, None)

    //Set Definition Unwrap
    
        ({S} <-> {P}), {S} |- (S <-> P), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Sim(ExtSet([s]), ExtSet([p]))), _ when s <> p -> J(Sim(s, p)), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Sim(ExtSet([s]), ExtSet([p]))), _ when s <> p -> Q(Sim(s, p)), (None, None)

        ({S} <-> {P}), {P} |- (S <-> P), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Sim(ExtSet([s]), ExtSet([p]))), _ when s <> p -> J(Sim(s, p)), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Sim(ExtSet([s]), ExtSet([p]))), _ when s <> p -> Q(Sim(s, p)), (None, None)

        ([S] <-> [P]), [S] |- (S <-> P), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Sim(IntSet([s]), IntSet([p]))), _ when s <> p -> J(Sim(s, p)), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Sim(IntSet([s]), IntSet([p]))), _ when s <> p -> Q(Sim(s, p)), (None, None)

        ([S] <-> [P]), [P] |- (S <-> P), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
        /* J(Sim(IntSet([s]), IntSet([p]))), _ when s <> p -> J(Sim(s, p)), (Some(identity(tv1)), Some(identity(dv1)))
        /* Q(Sim(IntSet([s]), IntSet([p]))), _ when s <> p -> Q(Sim(s, p)), (None, None)

    //Nothing is more specific than a instance, so its similar
    
        (S --> {P}),  S  |- (S <-> {P}), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Inh(s, ExtSet([p]))), _ when s <> p -> J(Sim(s, ExtSet([p]))), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Inh(s, ExtSet([p]))), _ when s <> p -> Q(Sim(s, ExtSet([p]))), (None, None)

        (S --> {P}), {P} |- (S <-> {P}), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Inh(s, ExtSet([p]))), _ when s <> p -> J(Sim(s, ExtSet([p]))), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Inh(s, ExtSet([p]))), _ when s <> p -> Q(Sim(s, ExtSet([p]))), (None, None)

    //nothing is more general than a property, so its similar
    
        ([S] --> P), [S] |- ([S] <-> P), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Inh(IntSet([s]), p)), _ when s <> p -> J(Sim(IntSet([s]), p)), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Inh(IntSet([s]), p)), _ when s <> p -> Q(Sim(IntSet([s]), p)), (None, None)

        ([S] --> P),  P  |- ([S] <-> P), (Truth:Identity, Desire:Identity, Derive:AllowBackward)
		/* J(Inh(IntSet([s]), p)), _ when s <> p -> J(Sim(IntSet([s]), p)), (Some(identity(tv1)), Some(identity(dv1)))
		/* Q(Inh(IntSet([s]), p)), _ when s <> p -> Q(Sim(IntSet([s]), p)), (None, None)

    ////// Truth-value functions: see TruthFunctions.java
    
    //// Immediate Inference ////////////////////////////////////////////////////////////////////////////////////
    //If S can stand for P, P can to a certain low degree also represent the class S
    //If after S usually P happens, then it might be a good guess that usually before P happens, S happens.
        (P --> S), (S --> P), task("?") |- (P --> S), (Truth:Conversion, Punctuation:Judgment)
        (P --> S), (S --> P), task("?") |- (P --> S), (Truth:Conversion, Punctuation:Judgment)		// TODO *** check repeat above
		/* Q(Inh(p1, s1)), Inh(s2, p2) when s1 <> p1 && s1 = s2 && p1 = p2-> J(Inh(p1, s1)), (Some(cnv(tv2)), None)


    //A belief b <f,c> is equal to --b <1-f,c>, which is the negation rule:
    
        (A --> B), A, task(negative) |- --(A --> B), (Truth:Negation, Desire:Negation, Derive:AllowBackward)
        (A --> B), B, task(negative) |- --(A --> B), (Truth:Negation, Desire:Negation, Derive:AllowBackward)
		/* J(Inh(a, b)), _ when task(negative, tv1) -> J(Not(Inh(a, b))), (Some(neg(tv1)), Some(desireNeg(dv1)))
		///* Q(Inh(a, b)), _ when task(negative, t) -> Q(Not(Inh(a, b))), (None, None)

      --(A --> B), A, task(negative) |-   (A --> B), (Truth:Negation, Desire:Negation, Derive:AllowBackward)
      --(A --> B), B, task(negative) |-   (A --> B), (Truth:Negation, Desire:Negation, Derive:AllowBackward)
		/* J(Not(Inh(a, b))), _ when task(negative, tv1) -> J(Inh(a, b)), (Some(neg(tv1)), Some(desireNeg(dv1)))
		///* Q(Not(Inh(a, b))), _ when task(negative, t) -> Q(Inh(a, b)), (None, None)
    
        (A <-> B), A, task(negative) |- --(A <-> B), (Truth:Negation, Desire:Negation, Derive:AllowBackward) // TODO
        (A <-> B), B, task(negative) |- --(A <-> B), (Truth:Negation, Desire:Negation, Derive:AllowBackward)
      --(A <-> B), A, task(negative) |-   (A <-> B), (Truth:Negation, Desire:Negation, Derive:AllowBackward)
      --(A <-> B), B, task(negative) |-   (A <-> B), (Truth:Negation, Desire:Negation, Derive:AllowBackward)
    
    //// inheritance-based syllogism ////////////////////////////////////////////////////////////////////////////////////
    //       (A --> B) ------- (B --> C)
    //            \               /
    //             \             /
    //              \           /
    //               \         /
    //                (A --> C)
    //If A is a special case of B, and B is a special case of C, so is A a special case of C (strong), the other variations are hypotheses (weak)
    
        (A --> B), (B --> C), not_equal(A,C) |- (A --> C), (Truth:Deduction, Desire:Strong, Derive:AllowBackward)
		/* J(Inh(a, b1)), Inh(b2, c) when a <> c && b1 = b2 -> J(Inh(a, c)), (Some(ded(tv1, tv2)), Some(desireStrong(dv1, dv2)))
		/* Q(Inh(a, b1)), Inh(b2, c) when a <> c && b1 = b2 -> Q(Inh(a, c)), (None, None)

        (A --> B), (A --> C), not_equal(B,C) |- (B --> C), (Truth:Abduction, Desire:Weak, Derive:AllowBackward)
		/* J(Inh(a1, b)), Inh(a2, c) when b <> c && a1 = a2 -> J(Inh(b, c)), (Some(abd(tv1, tv2)), Some(desireWeak(dv1, dv2)))
		/* Q(Inh(a1, b)), Inh(a2, c) when b <> c && a1 = a2 -> Q(Inh(b, c)), (None, None)

        (A --> C), (B --> C), not_equal(A,B) |- (A --> B), (Truth:Induction, Desire:Weak, Derive:AllowBackward)
		/* J(Inh(a, c1)), Inh(b, c2) when a <> c1 && c1 = c2 -> J(Inh(a, b)), (Some(ind(tv1, tv2)), Some(desireStrong(dv1, dv2)))
		/* Q(Inh(a, c1)), Inh(b, c2) when a <> c1 && c1 = c2 -> Q(Inh(a, b)), (None, None)

        (A --> B), (B --> C), not_equal(C,A) |- (C --> A), (Truth:Exemplification, Desire:Weak, Derive:AllowBackward)
		/* J(Inh(a, b1)), Inh(b2, c) when a <> c && b1 = b2 -> J(Inh(c, a)), (Some(exe(tv1, tv2)), Some(desireWeak(dv1, dv2)))
		/* Q(Inh(a, b1)), Inh(b2, c) when a <> c && b1 = b2 -> Q(Inh(c, a)), (None, None)

    //// similarity from inheritance ////////////////////////////////////////////////////////////////////////////////////
    //If S is a special case of P, and P is a special case of S, then S and P are similar
    
        (S --> P), (P --> S) |- (S <-> P), (Truth:Intersection, Desire:Strong, Derive:AllowBackward)
		/* J(Inh(s1, p1)), Inh(s2, p2) when s1 = s2 && p1 = p2 -> J(Sim(s1, p1)), (Some(int(tv1, tv2)), Some(desireStrong(dv1, dv2)))
		/* Q(Inh(s1, p1)), Inh(s2, p2) when s1 = s2 && p1 = p2 -> Q(Sim(s1, p1)), (None, None)

    //// inheritance from similarty <- TODO check why this one was missing ////////////////////////////////////////////////////////////////////////////////////
    
        (S <-> P), (P --> S) |- (S --> P), (Truth:ReduceConjunction, Desire:Strong, Derive:AllowBackward)
		/* J(Sim(s1, p1)), Inh(p2, s2) when s1 = s2 && p1 = p2 -> J(Inh(s1, p1)), (Some(redCon(tv1, tv2)), Some(desireStrong(dv1, dv2)))
		/* Q(Sim(s1, p1)), Inh(p2, s2) when s1 = s2 && p1 = p2 -> Q(Inh(s1, p1)), (None, None)

    //// similarity-based syllogism ////////////////////////////////////////////////////////////////////////////////////
    //If P and S are a special case of M, then they might be similar (weak),
    //also if P and S are a general case of M
    
        (P --> M), (S --> M), not_equal(S,P) |- (S <-> P), (Truth:Comparison, Desire:Weak, Derive:AllowBackward)
		/* J(Inh(p, m1)), Inh(s, m2) when s <> p && m1 = m2 -> J(Sim(s, p)), (Some(com(tv1, tv2)), Some(desireWeak(dv1, dv2)))
		/* Q(Inh(p, m1)), Inh(s, m2) when s <> p && m1 = m2 -> Q(Sim(s, p)), (None, None)

        (M --> P), (M --> S), not_equal(S,P) |- (S <-> P), (Truth:Comparison, Desire:Weak, Derive:AllowBackward)
		/* J(Inh(m1, p)), Inh(m2, s) when m1 = m2 && s <> p -> J(Sim(s, p)), (Some(com(tv1, tv2)), Some(desireWeak(dv1, dv2)))
		/* Q(Inh(m1, p)), Inh(m2, s) when m1 = m2 && s <> p -> Q(Sim(s, p)), (None, None)

    //If M is a special case of P and S and M are similar, then S is also a special case of P (strong)
    
        (M --> P), (S <-> M), not_equal(S,P) |- (S --> P), (Truth:Analogy, Desire:Strong, Derive:AllowBackward)
		/* J(Inh(m1, p)), Sim(s, m2) when s <> p && m1 = m2 -> J(Inh(s, p)), (Some(ana(tv1, tv2)), Some(desireStrong(dv1, dv2)))
		/* Q(Inh(m1, p)), Sim(s, m2) when s <> p && m1 = m2 -> Q(Inh(s, p)), (None, None)

        (P --> M), (S <-> M), not_equal(S,P) |- (P --> S), (Truth:Analogy, Desire:Strong, Derive:AllowBackward)
		/* J(Inh(p, m1)), Sim(s, m2) when s <> p && m1 = m2 -> J(Inh(p, s)), (Some(ana(tv1, tv2)), Some(desireStrong(dv1, dv2)))
		/* Q(Inh(p, m1)), Sim(s, m2) when s <> p && m1 = m2 -> Q(Inh(p, s)), (None, None)

        (M <-> P), (S <-> M), not_equal(S,P) |- (S <-> P), (Truth:Resemblance, Desire:Strong, Derive:AllowBackward)
		/* J(Sim(m1, p)), Inh(s, m2) when s <> p && m1 = m2 -> J(Sim(s, p)), (Some(res(tv1, tv2)), Some(desireStrong(dv1, dv2)))
		/* Q(Sim(m1, p)), Inh(s, m2) when s <> p && m1 = m2 -> Q(Sim(s, p)), (None, None)

    //// inheritance-based composition ////////////////////////////////////////////////////////////////////////////////////
    //If P and S are in the intension/extension of M, then union/difference and intersection can be built:
    
        (P --> M), (S --> M), not_set(S), not_set(P), not_equal(S,P), no_common_subterm(S,P) |- ((S | P) --> M), (Truth:Intersection),
                                                                                                ((S & P) --> M), (Truth:Union),
                                                                                                ((P ~ S) --> M), (Truth:Difference)
	    /* J(Inh(p, m1)), Inh(s, m2) when s <> p && m1 = m2 && not_set(s) && not_set(p) && no_common_subterm(s, p) -> J(Inh(IntInt(sort [s; p]), m1)), (Some(int(tv1, tv2)), None)    
		/* J(Inh(p, m1)), Inh(s, m2) when s <> p && m1 = m2 && not_set(s) && not_set(p) && no_common_subterm(s, p) -> J(Inh(ExtInt(sort [s; p]), m1)), (Some(uni(tv1, tv2)), None)
	    /* J(Inh(p, m1)), Inh(s, m2) when s <> p && m1 = m2 && not_set(s) && not_set(p) && no_common_subterm(s, p) -> J(Inh(IntDif(s, p), m1)), (Some(dif(tv1, tv2)), None)

        (M --> P), (M --> S), not_set(S), not_set(P), not_equal(S,P), no_common_subterm(S,P) |- (M --> (P & S)), (Truth:Intersection),
                                                                                                (M --> (P | S)), (Truth:Union),
                                                                                                (M --> (P - S)), (Truth:Difference)
	    /* J(Inh(m1, p)), Inh(m2, s) when s <> p && m1 = m2 && not_set(s) && not_set(p) && no_common_subterm(s, p) -> J(Inh(m1, ExtInt(sort [p; s]))), (Some(int(tv1, tv2)), None)
        /* J(Inh(m1, p)), Inh(m2, s) when s <> p && m1 = m2 && not_set(s) && not_set(p) && no_common_subterm(s, p) -> J(Inh(m1, IntInt(sort [p; s]))), (Some(uni(tv1, tv2)), None)
        /* J(Inh(m1, p)), Inh(m2, s) when s <> p && m1 = m2 && not_set(s) && not_set(p) && no_common_subterm(s, p) -> J(Inh(m1, ExtDif(p, s))), (Some(int(tv1, tv2)), None)
    
    //// inheritance-based decomposition ////////////////////////////////////////////////////////////////////////////////////
    //if (S --> M) is the case, and ((|,S,A_1..n) --> M) is not the case, then ((|,A_1..n) --> M) is not the case, hence Truth:DecomposePositiveNegativeNegative

        (S --> M), ((|,S,A_1..n) --> M) |- ((|,A_1..n) --> M), (Truth:DecomposePositiveNegativeNegative)
		/* J(Inh(s, m1)), Inh(IntInt(a_1_n), m2) when m1 = m2 && a_1_n |> List.contains s -> J(Inh(reduce(IntInt(listRemove s a_1_n)), m1)), (Some(pnn(tv1, tv2)), None)

        (S --> M), ((&,S,A_1..n) --> M) |- ((&,A_1..n) --> M), (Truth:DecomposeNegativePositivePositive)
		/* J(Inh(s, m1)), Inh(ExtInt(a_1_n), m2) when m1 = m2 && a_1_n |> List.contains s -> J(Inh(reduce(ExtInt(listRemove s a_1_n)), m1)), (Some(pnn(tv1, tv2)), None)

        (S --> M), ((S ~ P) --> M) |- (P --> M), (Truth:DecomposePositiveNegativePositive)
		/* J(Inh(s1, m1)), Inh(IntDif(s2, p), m2) when s1 = s2 && m1 = m2 -> J(Inh(p, m1)), (Some(pnn(tv1, tv2)), None)

        (S --> M), ((P ~ S) --> M) |- (P --> M), (Truth:DecomposeNegativeNegativeNegative)
		/* J(Inh(s1, m1)), Inh(IntDif(p, s2), m2) when s1 = s2 && m1 = m2 -> J(Inh(p, m1)), (Some(nnn(tv1, tv2)), None)

        (M --> S), (M --> (&,S,A_1..n)) |- (M --> (&,A_1..n)), (Truth:DecomposePositiveNegativeNegative)
		/* J(Inh(m1, s)), Inh(m2, ExtInt(a_1_n)) when m1 = m2 && a_1_n |> List.contains s -> J(Inh(m1, reduce(ExtInt(listRemove s a_1_n)))), (Some(pnn(tv1, tv2)), None)

        (M --> S), (M --> (|,S,A_1..n)) |- (M --> (|,A_1..n)), (Truth:DecomposeNegativePositivePositive)
		/* J(Inh(m1, s)), Inh(m2, IntInt(a_1_n)) when m1 = m2 && a_1_n |> List.contains s -> J(Inh(m1, reduce(IntInt(listRemove s a_1_n)))), (Some(npp(tv1, tv2)), None)

        (M --> S), (M --> (S - P)) |- (M --> P), (Truth:DecomposePositiveNegativePositive)
		/* J(Inh(m1, s1)), Inh(m2, ExtDif(s2, p)) when m1 = m2 && s1 = s2 -> J(Inh(m1, p)), (Some(pnp(tv1, tv2)), None)

        (M --> S), (M --> (P - S)) |- (M --> P), (Truth:DecomposeNegativeNegativeNegative)
		/* J(Inh(m1, s1)), Inh(m2, ExtDif(p, s2)) when m1 = m2 && s1 = s2 -> J(Inh(m1, p)), (Some(nnn(tv1, tv2)), None)
    
    //Set comprehension:
    
        (C --> A), (C --> B), set_ext(A), union(A,B,R) |- (C --> R), (Truth:Union)
		/* J(Inh(c1, ExtSet(a))), Inh(c2, ExtSet(b)) when c1 = c2 -> J(Inh(c1, reduce(ExtSet(union a b)))), (Some(uni(tv1, tv2)), None)

        (C --> A), (C --> B), set_int(A), union(A,B,R) |- (C --> R), (Truth:Intersection)
		/* J(Inh(c1, IntSet(a))), Inh(c2, IntSet(b)) when c1 = c2 -> J(Inh(c1, reduce(IntSet(union a b)))), (Some(int(tv1, tv2)), None)

        (A --> C), (B --> C), set_ext(A), union(A,B,R) |- (R --> C), (Truth:Intersection)
		/* J(Inh(ExtSet(a), c1)), Inh(ExtSet(b), c2) when c1 = c2 -> J(Inh(reduce(ExtSet(union a b)), c2)), (Some(int(tv1, tv2)), None)

        (A --> C), (B --> C), set_int(A), union(A,B,R) |- (R --> C), (Truth:Union)
		/* J(Inh(IntSet(a), c1)), Inh(IntSet(b), c2) when c1 = c2 -> J(Inh(reduce(IntSet(union a b)), c2)), (Some(uni(tv1, tv2)), None)
    
        (C --> A), (C --> B), set_ext(A), intersection(A,B,R) |- (C --> R), (Truth:Intersection)// TODO check for []
		/* J(Inh(c1, ExtSet(a))), Inh(c2, ExtSet(b)) when c1 = c2 && isIntersection a b -> J(Inh(c1, reduce(ExtSet(intersect a b)))), (Some(int(tv1, tv2)), None)	 

        (C --> A), (C --> B), set_int(A), intersection(A,B,R) |- (C --> R), (Truth:Union)// TODO check for []
		/* J(Inh(c1, IntSet(a))), Inh(c2, IntSet(b)) when c1 = c2 && isIntersection a b -> J(Inh(c1, reduce(IntSet(intersect a b)))), (Some(uni(tv1, tv2)), None)	

        (A --> C), (B --> C), set_ext(A), intersection(A,B,R) |- (R --> C), (Truth:Union)// TODO check for []
		/* J(Inh(ExtSet(a), c1)), Inh(ExtSet(b), c2) when c1 = c2 && isIntersection a b -> J(Inh(reduce(ExtSet(intersect a b)), c1)), (Some(uni(tv1, tv2)), None)	

        (A --> C), (B --> C), set_int(A), intersection(A,B,R) |- (R --> C), (Truth:Intersection)// TODO check for []
		/* J(Inh(IntSet(a), c1)), Inh(IntSet(b), c2) when c1 = c2 && isIntersection a b -> J(Inh(reduce(IntSet(intersect a b)), c1)), (Some(int(tv1, tv2)), None)	

        (C --> A), (C --> B), difference(A,B,R) |- (C --> R), (Truth:Difference)// TODO check for []
		/* J(Inh(c1, ExtSet(a))), Inh(c2, ExtSet(b)) when c1 = c2 && isDiff a b -> J(Inh(c1, reduce(ExtSet(diff a b)))), (Some(dif(tv1, tv2)), None)	

        (A --> C), (B --> C), difference(A,B,R) |- (R --> C), (Truth:Difference)// TODO check for []
	    /* J(Inh(c1, ExtSet(a))), Inh(c2, ExtSet(b)) when c1 = c2 && isDiff a b -> J(Inh(c1, reduce(IntSet(diff a b)))), (Some(dif(tv1, tv2)), None)	

    
    //Set element takeout:
    
        (C --> {A_1..n}), C |- (C --> {A_i}), (Truth:StructuralDeduction)/
		/* _, Inh(c, ExtSet(a_i::a_1_n)) -> J(Inh(c, ExtSet([a_i]))), (Some(structuralDed(tv2)), None)

        (C --> [A_1..n]), C |- (C --> [A_i]), (Truth:StructuralDeduction)
		/* _, Inh(c, IntSet(a_i::a_1_n)) -> J(Inh(c, IntSet([a_i]))), (Some(structuralDed(tv2)), None)

        ({A_1..n} --> C), C |- ({A_i} --> C), (Truth:StructuralDeduction)
		/* _, Inh(ExtSet(a_i::a_1_n), c) -> J(Inh(ExtSet([a_i]), c)), (Some(structuralDed(tv2)), None)

        ([A_1..n] --> C), C |- ([A_i] --> C), (Truth:StructuralDeduction)
		/* _, Inh(IntSet(a_i::a_1_n), c) -> J(Inh(IntSet([a_i]), c)), (Some(structuralDed(tv2)), None)
    
    //NAL3 single premise inference:
    
        ((|,A_1..n) --> M), M |- (A_i --> M), (Truth:StructuralDeduction)
		/* _, Inh(IntInt(a_i::a_1_n), m) -> J(Inh(a_i, m)), (Some(structuralDed(tv2)), None)

        (M --> (&,A_1..n)), M |- (M --> A_i), (Truth:StructuralDeduction)
		/* _, Inh(m, ExtInt(a_i::a_1_n)) -> J(Inh(m, a_i)), (Some(structuralDed(tv2)), None)
    
        ((B ~ G) --> S), S |- (B --> S), (Truth:StructuralDeduction)
		/* _, Inh(IntDif(b, g), s) -> J(Inh(b, s)), (Some(structuralDed(tv2)), None)

        (R --> (B - S)), R |- (R --> B), (Truth:StructuralDeduction)
		/* J(Inh(r, ExtDif(b, s))), _ -> J(Inh(r, b)), (Some(structuralDed(tv1)), None)
    
    ////// NAL4 - Transformations between products and images: ////////////////////////////////////////////////////////////////////////////////////
    //Relations and transforming them into different representations so that arguments and the relation itself can become the subject or predicate
    
        ((A_1..n) --> M), A_i |- (A_i --> (/,M, A_1..A_i.substitute(_)..A_n )), (Truth:Identity, Desire:Identity)
		/* _, Inh(Prod([a_i; x]), m) when m <> a_i -> J(Inh(a_i, ExtImg(m::(sub_ a_i [a_i; x])))), (Some(identity(tv2)), Some(identity(dv2)))
		/* _, Inh(Prod([x; a_i]), m) when m <> a_i -> J(Inh(a_i, ExtImg(m::(sub_ a_i [x; a_i])))), (Some(identity(tv2)), Some(identity(dv2)))
    
        (M --> (A_1..n)), A_i |- ((\,M, A_1..A_i.substitute(_)..A_n ) --> A_i)), (Truth:Identity, Desire:Identity) TODO more on this rule
		/* _, Inh(m, Prod([a_i; x])) when m <> a_i -> J(Inh(IntImg(m::(sub_ a_i [a_i; x])), a_i)), (Some(identity(tv2)), Some(identity(dv2)))
		/* _, Inh(m, Prod([x; a_i])) when m <> a_i -> J(Inh(IntImg(m::(sub_ a_i [x; a_i])), a_i)), (Some(identity(tv2)), Some(identity(dv2)))
    
        (A_i --> (/,M,A_1..A_i.substitute(_)..A_n )), M |- ((A_1..n) --> M), (Truth:Identity, Desire:Identity)
		/* _, Inh(a_i, ExtImg(m::(Constant "_")::a_1_n)) -> J(Inh(subst(Prod((Constant "_")::a_1_n)) (Constant "_") a_i, m)), (Some(identity(tv2)), Some(identity(dv2)))
		/* _, Inh(a_i, ExtImg(m::x::(Constant "_")::a_1_n)) -> J(Inh(subst(Prod(x::(Constant "_")::a_1_n)) (Constant "_") a_i, m)), (Some(identity(tv2)), Some(identity(dv2)))
    
        ((\,M, A_1..A_i.substitute(_)..A_n ) --> A_i), M |- (M --> (A_1..n)), (Truth:Identity, Desire:Identity)
		/* _, Inh(IntImg(m::(Constant "_")::a_1_n), a_i) -> J(Inh(m, subst(Prod((Constant "_")::a_1_n)) (Constant "_") a_i)), (Some(identity(tv2)), Some(identity(dv2)))
		/* _, Inh(IntImg(m::x::(Constant "_")::a_1_n), a_i) -> J(Inh(m, subst(Prod(x::(Constant "_")::a_1_n)) (Constant "_") a_i)), (Some(identity(tv2)), Some(identity(dv2)))
              
    
    //here now are the backward inference rules which should really only work on backward inference:
    
        (A --> S), (B --> S), task("?") |- (A --> B), (Punctuation:Question),
                                           (B --> A), (Punctuation:Question)
		/* Q(Inh(a, s1)), Inh(b, s2) when s1 = s2 -> Q(Inh(a, b)), (None, None)
		/* Q(Inh(a, s1)), Inh(b, s2) when s1 = s2 -> Q(Inh(b, a)), (None, None)

    //and the backward inference driven forward inference:
    
    //NAL2:
    
        ([A] <-> [B]), (A <-> B), task("?") |- ([A] <-> [B]), (Truth:BeliefIdentity, Punctuation:Judgment)
		/* Q(Sim(IntSet([a1]), IntSet([b1]))), Sim(a2, b2) when a1 = a2 && b1 = b2 && a1 <> b1 -> J(Sim(IntSet([a1]), IntSet([b1]))), (Some(beliefId(tv1, tv2)), None)

        ({A} <-> {B}), (A <-> B), task("?") |- ({A} <-> {B}), (Truth:BeliefIdentity, Punctuation:Judgment)
		/* Q(Sim(ExtSet([a1]), ExtSet([b1]))), Sim(a2, b2) when a1 = a2 && b1 = b2 && a1 <> b1 -> J(Sim(ExtSet([a1]), ExtSet([b1]))), (Some(beliefId(tv1, tv2)), None)

        ([A] --> [B]), (A <-> B), task("?") |- ([A] --> [B]), (Truth:BeliefIdentity, Punctuation:Judgment)
   	    /* Q(Inh(IntSet([a1]), IntSet([b1]))), Sim(a2, b2) when a1 = a1 && b1 = b2 && a1 <> b1 -> J(Inh(IntSet([a1]), IntSet([b1]))), (Some(beliefId(tv1, tv2)), None)

        ({A} --> {B}), (A <-> B), task("?") |- ({A} --> {B}), (Truth:BeliefIdentity, Punctuation:Judgment)
		/* Q(Inh(ExtSet([a1]), ExtSet([b1]))), Sim(a2, b2) when a1 = a2 && b1 = b2 && a1 <> b1 -> J(Inh(ExtSet([a1]), ExtSet([b1]))), (Some(beliefId(tv1, tv2)), None)
    
    //NAL3:
    
    ////composition on both sides of a statement:
    
        ((&,B,A_1..n) --> (&,A,A_1..n)), (B --> A), task("?") |- ((&,B,A_1..n) --> (&,A,A_1..n)), (Truth:beliefStructuralDeduction, Punctuation:Judgment)
		/* Q(Inh(ExtInt(a_1_n), ExtInt(b_1_n))), Inh(b, a) when (a_1_n |> List.contains b) && (b_1_n |> List.contains a) && ((set a_1_n) |> Set.remove b) = ((set b_1_n) |> Set.remove a) -> J(Inh(ExtInt(sort(a_1_n)), ExtInt(sort(b_1_n)))), (Some(beliefStructuralDed(tv1, tv2)), None)

        ((|,B,A_1..n) --> (|,A,A_1..n)), (B --> A), task("?") |- ((|,B,A_1..n) --> (|,A,A_1..n)), (Truth:beliefStructuralDeduction, Punctuation:Judgment)
		/* Q(Inh(IntInt(a_1_n), IntInt(b_1_n))), Inh(b, a) when (a_1_n |> List.contains b) && (b_1_n |> List.contains a) && ((set a_1_n) |> Set.remove b) = ((set b_1_n) |> Set.remove a) -> J(Inh(IntInt(sort(a_1_n)), IntInt(sort(b_1_n)))), (Some(beliefStructuralDed(tv1, tv2)), None)
    
        ((-,S,A) --> (-,S,B)), (B --> A), task("?") |- ((-,S,A) --> (-,S,B)), (Truth:beliefStructuralDeduction, Punctuation:Judgment)
		/* Q(Inh(ExtDif(s1, a1), ExtDif(s2, b1))), Inh(b2, a2) when a1 = a2 && b1 = b1 && s1 = s2 && a1 <> b1 -> J(Inh(ExtDif(s1, a1), ExtDif(s1, b1))), (Some(beliefStructuralDed(tv1, tv2)), None)

        ((~,S,A) --> (~,S,B)), (B --> A), task("?") |- ((~,S,A) --> (~,S,B)), (Truth:beliefStructuralDeduction, Punctuation:Judgment)
		/* Q(Inh(IntDif(s1, a1), IntDif(s2, b1))), Inh(b2, a2) when a1 = a2 && b1 = b1 && s1 = s2 && a1 <> b1 -> J(Inh(IntDif(s1, b1), IntDif(s1, a1))), (Some(beliefStructuralDed(tv1, tv2)), None)
    
    ////composition on one side of aay w statement:
    
        (W --> (|,B,A_1..n)), (W --> B), task("?") |- (W --> (|,B,A_1..n)), (Truth:beliefStructuralDeduction, Punctuation:Judgment)
		/* Q(Inh(w1, IntInt(a_1_n))), Inh(w2, b) when w1 = w2 && a_1_n |> List.contains b -> J(Inh(w1, reduce(IntInt(sort(a_1_n))))), (Some(beliefStructuralDed(tv1, tv2)), None)

        ((&,B,A_1..n) --> W), (B --> W), task("?") |- ((&,B,A_1..n) --> W), (Truth:beliefStructuralDeduction, Punctuation:Judgment)
		/* Q(Inh(ExtInt(a_1_n), w1)), Inh(b, w2) when w1 = w2 && a_1_n |> List.contains b -> J(Inh(reduce(ExtInt(sort(a_1_n))), w1)), (Some(beliefStructuralDed(tv1, tv2)), None)

        (W --> (-,S,B)), (W --> B), task("?") |- (W --> (-,S,B)), (Truth:BeliefStructuralDifference, Punctuation:Judgment)
		/* Q(Inh(w1, ExtDif(s, b1))), Inh(w2, b2) when b1 = b2 && w1 = w2 -> J(Inh(w1, reduce(ExtDif(s, b)))), (Some(beliefStructuralDif(tv1, tv2)), None)

        ((~,S,B) --> W), (B --> W), task("?") |- ((~,S,B) --> W), (Truth:BeliefStructuralDifference, Punctuation:Judgment)
		/* Q(Inh(IntDif(s, b1), w1)), Inh(b2, w2) when b1 = b2 && w1 = w2 -> J(Inh(reduce(IntDif(s, b1)), w1)), (Some(beliefStructuralDif(tv1, tv2)), None)
    
    //NAL4:
    
    ////composition on both sides of a statement:
        ((B * P) --> ?X) ,(B --> A), task("?") |- ((B * P) --> (A * P)), (Truth:beliefStructuralDeduction, Punctuation:Judgment)
		/* Q(Inh(Prod([b1; p]), QVar(x))), Inh(b2, a) when b1 = b2 -> J(Inh(reduce(Prod([b1; p])), reduce(Prod([a; p])))), (Some(beliefStructuralDed(tv1, tv2)), None)

        ((B * P) --> (A * P)) ,(B --> A), task("?") |- ((B * P) --> (A * P)), (Truth:beliefStructuralDeduction, Punctuation:Judgment)
		/* Q(Inh(Prod([b1; p1]), Prod([a1; p2]))), Inh(b2, a2) when a1 = a2 && b1 = b2 -> J(Inh(reduce(Prod([b1; p1])), reduce(Prod([a1; p1])))), (Some(beliefStructuralDed(tv1, tv2)), None)

        ((\,N,A,_) --> ?X), (N --> R), task("?") |- ((\,N,A,_) --> (\,R,A,_)), (Truth:beliefStructuralDeduction, Punctuation:Judgment)
		/* Q(Inh(IntImg([n1; a; Constant "_"]), QVar(x))), Inh(n2, r) when n1 = n2 -> J(Inh(reduce(IntImg([n1; a; Constant "_"])), reduce(IntImg([r; a; Constant "_"])))), (Some(beliefStructuralDed(tv1, tv2)), None)

        ((\,N,A,_) --> (\,R,A,_)), (N --> R), task("?") |- ((\,N,A,_) --> (\,R,A,_)), (Truth:beliefStructuralDeduction, Punctuation:Judgment)
		/* Q(Inh(IntImg([n1; a1; Constant "_"]), IntImg([r1; a2; Constant "_"]))), Inh(n2, r2) when a1 = a2 && r1 = r2 && n1 = n2 -> J(Inh(reduce(IntImg([n1; a1; Constant "_"])), reduce(IntImg([r1; a1; Constant "_"])))), (Some(beliefStructuralDed(tv1, tv2)), None)

        ((/,N,_,B) --> ?X), (S --> B), task("?") |- ((/,N,_,B) --> (/,N,_,S)), (Truth:beliefStructuralDeduction, Punctuation:Judgment)
  	    /* Q(Inh(ExtImg([n1; Constant "_"; b1]), QVar(X))), Inh(s, b2) when b1 = b2 -> J(Inh(reduce(ExtImg([n1; Constant "_"; b1])), reduce(ExtImg([n1; Constant "_"; s])))), (Some(beliefStructuralDed(tv1, tv2)), None)

        ((/,N,_,B) --> (/,N,_,S)), (S --> B), task("?") |- ((/,N,_,B) --> (/,N,_,S)), (Truth:beliefStructuralDeduction, Punctuation:Judgment)
        /* Q(Inh(ExtImg([n1; Constant "_"; b1]), ExtImg([n2; Constant "_"; s1]))), Inh(s, b2) when b1 = b2 && n1 = n2 -> J(Inh(reduce(ExtImg([n1; Constant "_"; b])), reduce(IntImg([n1; Constant "_"; s])))), (Some(beliefStructuralDed(tv1, tv2)), None)

